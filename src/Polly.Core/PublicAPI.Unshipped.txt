#nullable enable
Polly.CircuitBreaker.BreakDurationGeneratorArguments.BreakDurationGeneratorArguments(double failureRate, int failureCount, Polly.ResilienceContext! context, int halfOpenAttempts) -> void
Polly.CircuitBreaker.BreakDurationGeneratorArguments.HalfOpenAttempts.get -> int
Polly.Simmy.Behavior.BehaviorActionArguments
Polly.Simmy.Behavior.BehaviorActionArguments.BehaviorActionArguments() -> void
Polly.Simmy.Behavior.BehaviorActionArguments.BehaviorActionArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Behavior.BehaviorActionArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Behavior.BehaviorStrategyOptions
Polly.Simmy.Behavior.BehaviorStrategyOptions.BehaviorAction.get -> System.Func<Polly.Simmy.Behavior.BehaviorActionArguments, System.Threading.Tasks.ValueTask>?
Polly.Simmy.Behavior.BehaviorStrategyOptions.BehaviorAction.set -> void
Polly.Simmy.Behavior.BehaviorStrategyOptions.BehaviorStrategyOptions() -> void
Polly.Simmy.Behavior.BehaviorStrategyOptions.OnBehaviorInjected.get -> System.Func<Polly.Simmy.Behavior.OnBehaviorInjectedArguments, System.Threading.Tasks.ValueTask>?
Polly.Simmy.Behavior.BehaviorStrategyOptions.OnBehaviorInjected.set -> void
Polly.Simmy.Behavior.OnBehaviorInjectedArguments
Polly.Simmy.Behavior.OnBehaviorInjectedArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Behavior.OnBehaviorInjectedArguments.OnBehaviorInjectedArguments() -> void
Polly.Simmy.Behavior.OnBehaviorInjectedArguments.OnBehaviorInjectedArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.BehaviorPipelineBuilderExtensions
Polly.Simmy.EnabledGeneratorArguments
Polly.Simmy.EnabledGeneratorArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.EnabledGeneratorArguments.EnabledGeneratorArguments() -> void
Polly.Simmy.EnabledGeneratorArguments.EnabledGeneratorArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Fault.FaultGeneratorArguments
Polly.Simmy.Fault.FaultGeneratorArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Fault.FaultGeneratorArguments.FaultGeneratorArguments() -> void
Polly.Simmy.Fault.FaultGeneratorArguments.FaultGeneratorArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Fault.FaultStrategyOptions
Polly.Simmy.Fault.FaultStrategyOptions.FaultGenerator.get -> System.Func<Polly.Simmy.Fault.FaultGeneratorArguments, System.Threading.Tasks.ValueTask<System.Exception?>>?
Polly.Simmy.Fault.FaultStrategyOptions.FaultGenerator.set -> void
Polly.Simmy.Fault.FaultStrategyOptions.FaultStrategyOptions() -> void
Polly.Simmy.Fault.FaultStrategyOptions.OnFaultInjected.get -> System.Func<Polly.Simmy.Fault.OnFaultInjectedArguments, System.Threading.Tasks.ValueTask>?
Polly.Simmy.Fault.FaultStrategyOptions.OnFaultInjected.set -> void
Polly.Simmy.Fault.OnFaultInjectedArguments
Polly.Simmy.Fault.OnFaultInjectedArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Fault.OnFaultInjectedArguments.Fault.get -> System.Exception!
Polly.Simmy.Fault.OnFaultInjectedArguments.OnFaultInjectedArguments() -> void
Polly.Simmy.Fault.OnFaultInjectedArguments.OnFaultInjectedArguments(Polly.ResilienceContext! context, System.Exception! fault) -> void
Polly.Simmy.FaultPipelineBuilderExtensions
Polly.Simmy.InjectionRateGeneratorArguments
Polly.Simmy.InjectionRateGeneratorArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.InjectionRateGeneratorArguments.InjectionRateGeneratorArguments() -> void
Polly.Simmy.InjectionRateGeneratorArguments.InjectionRateGeneratorArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Latency.LatencyGeneratorArguments
Polly.Simmy.Latency.LatencyGeneratorArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Latency.LatencyGeneratorArguments.LatencyGeneratorArguments() -> void
Polly.Simmy.Latency.LatencyGeneratorArguments.LatencyGeneratorArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Latency.LatencyStrategyOptions
Polly.Simmy.Latency.LatencyStrategyOptions.Latency.get -> System.TimeSpan
Polly.Simmy.Latency.LatencyStrategyOptions.Latency.set -> void
Polly.Simmy.Latency.LatencyStrategyOptions.LatencyGenerator.get -> System.Func<Polly.Simmy.Latency.LatencyGeneratorArguments, System.Threading.Tasks.ValueTask<System.TimeSpan>>?
Polly.Simmy.Latency.LatencyStrategyOptions.LatencyGenerator.set -> void
Polly.Simmy.Latency.LatencyStrategyOptions.LatencyStrategyOptions() -> void
Polly.Simmy.Latency.LatencyStrategyOptions.OnLatency.get -> System.Func<Polly.Simmy.Latency.OnLatencyArguments, System.Threading.Tasks.ValueTask>?
Polly.Simmy.Latency.LatencyStrategyOptions.OnLatency.set -> void
Polly.Simmy.Latency.OnLatencyArguments
Polly.Simmy.Latency.OnLatencyArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Latency.OnLatencyArguments.Latency.get -> System.TimeSpan
Polly.Simmy.Latency.OnLatencyArguments.OnLatencyArguments() -> void
Polly.Simmy.Latency.OnLatencyArguments.OnLatencyArguments(Polly.ResilienceContext! context, System.TimeSpan latency) -> void
Polly.Simmy.LatencyPipelineBuilderExtensions
Polly.Simmy.MonkeyStrategy
Polly.Simmy.MonkeyStrategy.MonkeyStrategy(Polly.Simmy.MonkeyStrategyOptions! options) -> void
Polly.Simmy.MonkeyStrategy.ShouldInjectAsync(Polly.ResilienceContext! context) -> System.Threading.Tasks.ValueTask<bool>
Polly.Simmy.MonkeyStrategy<T>
Polly.Simmy.MonkeyStrategy<T>.MonkeyStrategy(Polly.Simmy.MonkeyStrategyOptions! options) -> void
Polly.Simmy.MonkeyStrategy<T>.ShouldInjectAsync(Polly.ResilienceContext! context) -> System.Threading.Tasks.ValueTask<bool>
Polly.Simmy.MonkeyStrategyOptions
Polly.Simmy.MonkeyStrategyOptions.MonkeyStrategyOptions() -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>
Polly.Simmy.MonkeyStrategyOptions<TResult>.Enabled.get -> bool
Polly.Simmy.MonkeyStrategyOptions<TResult>.Enabled.set -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>.EnabledGenerator.get -> System.Func<Polly.Simmy.EnabledGeneratorArguments, System.Threading.Tasks.ValueTask<bool>>?
Polly.Simmy.MonkeyStrategyOptions<TResult>.EnabledGenerator.set -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>.InjectionRate.get -> double
Polly.Simmy.MonkeyStrategyOptions<TResult>.InjectionRate.set -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>.InjectionRateGenerator.get -> System.Func<Polly.Simmy.InjectionRateGeneratorArguments, System.Threading.Tasks.ValueTask<double>>?
Polly.Simmy.MonkeyStrategyOptions<TResult>.InjectionRateGenerator.set -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>.MonkeyStrategyOptions() -> void
Polly.Simmy.MonkeyStrategyOptions<TResult>.Randomizer.get -> System.Func<double>!
Polly.Simmy.MonkeyStrategyOptions<TResult>.Randomizer.set -> void
Polly.Simmy.OutcomePipelineBuilderExtensions
Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>
Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>.OnOutcomeInjectedArguments() -> void
Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>.OnOutcomeInjectedArguments(Polly.ResilienceContext! context, Polly.Outcome<TResult> outcome) -> void
Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>.Outcome.get -> Polly.Outcome<TResult>
Polly.Simmy.Outcomes.OutcomeGeneratorArguments
Polly.Simmy.Outcomes.OutcomeGeneratorArguments.Context.get -> Polly.ResilienceContext!
Polly.Simmy.Outcomes.OutcomeGeneratorArguments.OutcomeGeneratorArguments() -> void
Polly.Simmy.Outcomes.OutcomeGeneratorArguments.OutcomeGeneratorArguments(Polly.ResilienceContext! context) -> void
Polly.Simmy.Outcomes.OutcomeStrategyOptions
Polly.Simmy.Outcomes.OutcomeStrategyOptions.OutcomeStrategyOptions() -> void
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>.OnOutcomeInjected.get -> System.Func<Polly.Simmy.Outcomes.OnOutcomeInjectedArguments<TResult>, System.Threading.Tasks.ValueTask>?
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>.OnOutcomeInjected.set -> void
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>.OutcomeGenerator.get -> System.Func<Polly.Simmy.Outcomes.OutcomeGeneratorArguments, System.Threading.Tasks.ValueTask<Polly.Outcome<TResult>?>>!
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>.OutcomeGenerator.set -> void
Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>.OutcomeStrategyOptions() -> void
static Polly.Simmy.BehaviorPipelineBuilderExtensions.AddChaosBehavior<TBuilder>(this TBuilder! builder, double injectionRate, System.Func<System.Threading.Tasks.ValueTask>! behavior) -> TBuilder!
static Polly.Simmy.BehaviorPipelineBuilderExtensions.AddChaosBehavior<TBuilder>(this TBuilder! builder, Polly.Simmy.Behavior.BehaviorStrategyOptions! options) -> TBuilder!
static Polly.Simmy.FaultPipelineBuilderExtensions.AddChaosFault<TBuilder>(this TBuilder! builder, double injectionRate, System.Func<System.Exception?>! faultGenerator) -> TBuilder!
static Polly.Simmy.FaultPipelineBuilderExtensions.AddChaosFault<TBuilder>(this TBuilder! builder, Polly.Simmy.Fault.FaultStrategyOptions! options) -> TBuilder!
static Polly.Simmy.LatencyPipelineBuilderExtensions.AddChaosLatency<TBuilder>(this TBuilder! builder, double injectionRate, System.TimeSpan latency) -> TBuilder!
static Polly.Simmy.LatencyPipelineBuilderExtensions.AddChaosLatency<TBuilder>(this TBuilder! builder, Polly.Simmy.Latency.LatencyStrategyOptions! options) -> TBuilder!
static Polly.Simmy.OutcomePipelineBuilderExtensions.AddChaosResult<TResult>(this Polly.ResiliencePipelineBuilder<TResult>! builder, double injectionRate, System.Func<TResult?>! resultGenerator) -> Polly.ResiliencePipelineBuilder<TResult>!
static Polly.Simmy.OutcomePipelineBuilderExtensions.AddChaosResult<TResult>(this Polly.ResiliencePipelineBuilder<TResult>! builder, Polly.Simmy.Outcomes.OutcomeStrategyOptions<TResult>! options) -> Polly.ResiliencePipelineBuilder<TResult>!
